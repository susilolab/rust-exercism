use std::fmt;

pub struct Clock {
    hours: i32,
    minutes: i32,
}

impl Clock {
    pub fn new(hours: i32, minutes: i32) -> Self {
        Clock { hours: hours, minutes: minutes }
    }

    pub fn add_minutes(&mut self, minutes: i32) -> Self {
        let m_add = self.minutes + minutes;
        // let mut res: i32 = 0;

        // minutes = 1500
        // let clock = Clock::new(5, 32).add_minutes(1500);
        // Clock::new(23, 59).add_minutes(2);
        // add
        if minutes >= 0 && m_add > 60 {
            let hours = m_add/60;
            self.hours += hours;
            self.minutes = m_add % 60;

            if self.minutes > 60 {
                self.hours += 1;
                self.minutes = self.minutes % 60;
            }

            if self.hours == 24 {
                self.hours = 0;
            } else if self.hours > 24 {
                self.hours = self.hours % 24;
            }            
        } else if minutes >= 0 && m_add < 60 {
            self.minutes = m_add;
        // sub
        } else {
            let i: i32 = minutes.wrapping_abs();
            
            // jam > 0 dan i > m && i < 60
            if self.hours > 0 && i > self.minutes && i < 60 {
                self.hours -= 1;
                self.minutes = (self.minutes + 60) - i;
            // ex: i = 3000
            } else if self.hours > 0 && i > self.minutes && i > 59 {
                let h = i / 60; // ex: 50
                let m = i % 60;

                if h > 24 {
                    let ha = h / 24;
                    let bh = if h % 24 == 0 {
                        h/24
                    } else if ((ha * 24)+self.hours) < 0 {
                        (h/24) + 1// 3
                    } else {
                        (h/24)
                    };
                    self.hours = ((bh * 24) + self.hours) - h; // 74-50 = 24 = 0
                    if self.hours == 24 {
                        self.hours = 0;
                    }
                } else {
                    self.hours -= h;
                }
                
                if self.minutes < m {
                    self.hours -= 1;
                    self.minutes = (60 + self.minutes) - m;
                } else {
                    self.minutes = self.minutes - m;
                }

            } else if self.hours > 0 && self.minutes > i {
                self.minutes = self.minutes - i;
            } else if self.hours > 0 && self.minutes == i {
                self.minutes -= i;
            } else if self.hours == 0 && self.minutes > 0 && i > self.minutes {
                self.hours = 23;
                self.minutes = self.minutes + 60 - i;
            } else if self.hours == 0 && self.minutes == 0 {
                let h = 24;
                let h_sub = (i/60) + 1;
                if i >= 60 {
                    self.hours = h - h_sub;
                }

                self.minutes = (h_sub * 60) - i;
            }
        }

        Clock { hours: self.hours, minutes: self.minutes }
    }
}

impl fmt::Display for Clock {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        if self.hours > 0 && self.minutes < 0 {
            let abs_min: i32 = self.minutes.wrapping_abs();
            let h = self.hours - 1;
            let m = 60 - abs_min;
            write!(f, "{:0>2}:{:0>2}", h, m)
        } else if self.hours < 0 && self.minutes == 0 {
            let abs_h: i32 = self.hours.wrapping_abs(); // 25
            let abs_rem = abs_h % 24; // 1
            let h = if abs_h > 24 && abs_h/24 < 2 && abs_rem == 0 {
                abs_h/24
            } else if abs_h > 24 && (abs_h/24 < 2 || abs_h/24 > 1) && abs_rem > 0 {
                (abs_h/24)+1
            } else if abs_h < 24 {
                1
            } else {
                abs_h/24
            };
            let h_res = (24 * h) - abs_h;            
            write!(f, "{:0>2}:{:0>2}", h_res, self.minutes)
        } else if self.hours > 0 && self.minutes == 60 {
            let h = self.hours + 1;
            let m = 0;
            write!(f, "{:0>2}:{:0>2}", h, m)
        
        } else if self.hours < 0 && self.minutes > 0 {
            let abs_h: i32 = self.hours.wrapping_abs();
            let h = if abs_h < 24 {
                24 - abs_h
            } else {
                let hs = abs_h/24;
                hs
            };
            write!(f, "{:0>2}:{:0>2}", h, self.minutes)
        } else if self.hours == 0 && self.minutes > 0 {
            let h = self.minutes/60;
            let h_rem = self.minutes % 60;
            let hr = if h > 23 {
                h-24
            } else {
                h
            };
            write!(f, "{:0>2}:{:0>2}", hr, h_rem)
        } else if self.hours == 24 && self.minutes == 0 {
            write!(f, "{:0>2}:{:0>2}", 0, 0)
        } else if self.hours > 24 && self.minutes == 0 {
            let h = self.hours / 24;

            write!(f, "{:0>2}:{:0>2}", h, 0)
        } else {
            write!(f, "{:0>2}:{:0>2}", self.hours, self.minutes)
        }
    }
}

impl fmt::Debug for Clock {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{:0>2}:{:0>2}", self.hours, self.minutes)
    }
}

impl PartialEq for Clock {
    fn eq(&self, other: &Self) -> bool {
        let h1 = self.hours;
        let mut h2 = 0;
        if other.hours > 23 {
            h2 = other.hours % 24;
        }

        if self.minutes == other.minutes && self.hours == other.hours {
            return true;
        } else if self.minutes == other.minutes && self.hours == h2 {
            return true;
        } else if self.minutes == other.minutes && self.hours != other.hours {
            if self.hours < 24 && other.hours < 24 && self.hours > 0 && other.hours > 0 {
                return false;
            } else if self.hours < 24 && self.hours > 0 && other.hours > 23 && other.hours > 0 {
                let h = other.hours/24;
                if self.hours == h {
                    return true;
                } else {
                    return false;
                }
            } else if self.hours > 0 && other.hours < 0 {
                let abs_oh = other.hours.wrapping_abs();
                if abs_oh < 24 && self.hours == (24 - abs_oh) {
                    return true;
                } else if abs_oh > 23 && abs_oh%24 > 0 {
                    let rh = (abs_oh/24)+1;
                    if ((24 * rh) - abs_oh) == self.hours {
                        return true;
                    } else {
                        return false;
                    }
                }
            }
        } else if self.hours == other.hours && (self.minutes > 59 || other.minutes > 59) {
            let h = if other.minutes > 59 {
                other.minutes%60 == self.minutes
            } else {
                self.minutes%60 == other.minutes
            };

            return h
        } else if self.hours != other.hours && self.minutes != other.minutes && other.hours < 0 && other.minutes < 0 {
            let h = other.hours.wrapping_abs();
            let m = other.minutes.wrapping_abs();
            
            let hr = false;
            let mr = false;

            if h < 24 && m < 60 {
                let ha = 24 - h;
                let ma = 60 - m;
                return self.hours == ha && self.minutes == ma;

            } else if h < 24 && m > 59 {
                if m % 60 > 0 {
                    let mt = (m/60)+1;
                    let ma = (mt * 60) - (m % 60);
                }
            }

            if m < 60 {

            } else {
                
            }
        }
        false
    }
}